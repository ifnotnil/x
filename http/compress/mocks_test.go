// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package compress

import (
	"io"

	mock "github.com/stretchr/testify/mock"
)

// NewMockDecompressor creates a new instance of MockDecompressor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDecompressor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDecompressor {
	mock := &MockDecompressor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDecompressor is an autogenerated mock type for the Decompressor type
type MockDecompressor struct {
	mock.Mock
}

type MockDecompressor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDecompressor) EXPECT() *MockDecompressor_Expecter {
	return &MockDecompressor_Expecter{mock: &_m.Mock}
}

// Read provides a mock function for the type MockDecompressor
func (_mock *MockDecompressor) Read(p []byte) (int, error) {
	ret := _mock.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return returnFunc(p)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = returnFunc(p)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDecompressor_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockDecompressor_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - p []byte
func (_e *MockDecompressor_Expecter) Read(p interface{}) *MockDecompressor_Read_Call {
	return &MockDecompressor_Read_Call{Call: _e.mock.On("Read", p)}
}

func (_c *MockDecompressor_Read_Call) Run(run func(p []byte)) *MockDecompressor_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDecompressor_Read_Call) Return(n int, err error) *MockDecompressor_Read_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockDecompressor_Read_Call) RunAndReturn(run func(p []byte) (int, error)) *MockDecompressor_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function for the type MockDecompressor
func (_mock *MockDecompressor) Reset(compressedBody io.Reader) error {
	ret := _mock.Called(compressedBody)

	if len(ret) == 0 {
		panic("no return value specified for Reset")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(io.Reader) error); ok {
		r0 = returnFunc(compressedBody)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDecompressor_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockDecompressor_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
//   - compressedBody io.Reader
func (_e *MockDecompressor_Expecter) Reset(compressedBody interface{}) *MockDecompressor_Reset_Call {
	return &MockDecompressor_Reset_Call{Call: _e.mock.On("Reset", compressedBody)}
}

func (_c *MockDecompressor_Reset_Call) Run(run func(compressedBody io.Reader)) *MockDecompressor_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 io.Reader
		if args[0] != nil {
			arg0 = args[0].(io.Reader)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDecompressor_Reset_Call) Return(err error) *MockDecompressor_Reset_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDecompressor_Reset_Call) RunAndReturn(run func(compressedBody io.Reader) error) *MockDecompressor_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBodyDecoder creates a new instance of MockBodyDecoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBodyDecoder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBodyDecoder {
	mock := &MockBodyDecoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBodyDecoder is an autogenerated mock type for the BodyDecoder type
type MockBodyDecoder struct {
	mock.Mock
}

type MockBodyDecoder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBodyDecoder) EXPECT() *MockBodyDecoder_Expecter {
	return &MockBodyDecoder_Expecter{mock: &_m.Mock}
}

// WrapBody provides a mock function for the type MockBodyDecoder
func (_mock *MockBodyDecoder) WrapBody(body io.ReadCloser) io.ReadCloser {
	ret := _mock.Called(body)

	if len(ret) == 0 {
		panic("no return value specified for WrapBody")
	}

	var r0 io.ReadCloser
	if returnFunc, ok := ret.Get(0).(func(io.ReadCloser) io.ReadCloser); ok {
		r0 = returnFunc(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}
	return r0
}

// MockBodyDecoder_WrapBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WrapBody'
type MockBodyDecoder_WrapBody_Call struct {
	*mock.Call
}

// WrapBody is a helper method to define mock.On call
//   - body io.ReadCloser
func (_e *MockBodyDecoder_Expecter) WrapBody(body interface{}) *MockBodyDecoder_WrapBody_Call {
	return &MockBodyDecoder_WrapBody_Call{Call: _e.mock.On("WrapBody", body)}
}

func (_c *MockBodyDecoder_WrapBody_Call) Run(run func(body io.ReadCloser)) *MockBodyDecoder_WrapBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 io.ReadCloser
		if args[0] != nil {
			arg0 = args[0].(io.ReadCloser)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBodyDecoder_WrapBody_Call) Return(readCloser io.ReadCloser) *MockBodyDecoder_WrapBody_Call {
	_c.Call.Return(readCloser)
	return _c
}

func (_c *MockBodyDecoder_WrapBody_Call) RunAndReturn(run func(body io.ReadCloser) io.ReadCloser) *MockBodyDecoder_WrapBody_Call {
	_c.Call.Return(run)
	return _c
}
