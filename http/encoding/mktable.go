//go:build generators

package main

import (
	"bytes"
	"encoding/xml"
	"go/format"
	"io"
	"log"
	"net/http"
	"os"
	"slices"
	"strings"
	"text/template"
)

// https://pkg.go.dev/text/template

const tmp = `// Code generated by mktable.go; DO NOT EDIT.

package encoding

var toMIB = map[string]uint16{
{{- range $alias, $mib := .ToMIB }}
	"{{ $alias }}": {{ $mib }},
{{- end }}
}
`

type templateValues struct {
	PerMIB map[string][]string
	ToMIB  map[string]string
}

type registry struct {
	XMLName  xml.Name `xml:"registry"`
	Updated  string   `xml:"updated"`
	Registry []struct {
		ID     string   `xml:"id,attr"`
		Record []record `xml:"record"`
	} `xml:"registry"`
}

type record struct {
	Name string `xml:"name"`
	Xref []struct {
		Type string `xml:"type,attr"`
		Data string `xml:"data,attr"`
	} `xml:"xref"`
	Desc struct {
		Data string `xml:",innerxml"`
	} `xml:"description,"`
	MIB   string   `xml:"value"`
	Alias []string `xml:"alias"`
	MIME  string   `xml:"preferred_alias"`
}

func (r record) AllAliases() []string {
	sl := make([]string, 0, len(r.Alias))

	for _, a := range r.Alias {
		if strings.IndexByte(a, '\n') > -1 {
			lines := strings.SplitN(a, "\n", 2)
			if len(lines) == 2 {
				a = strings.SplitN(a, "\n", 2)[0]
			}
		}

		if strings.HasPrefix(a, "cs") {
			sl = append(sl, strings.SplitN(a[2:], "\n", 2)[0])
		}

		sl = append(sl, a)
	}

	switch r.MIB {
	case "2085":
		sl = append(sl, "HZGB2312")
	}

	if !slices.Contains(sl, r.Name) {
		sl = append(sl, r.Name)
	}

	return sl
}

// https://www.iana.org/assignments/character-sets/character-sets.xml

func main() {
	r, err := http.Get("https://www.iana.org/assignments/character-sets/character-sets.xml")
	if err != nil {
		log.Fatalf("error during xml fetching %s", err.Error())
	}
	defer r.Body.Close()

	reg := &registry{}
	if err := xml.NewDecoder(r.Body).Decode(&reg); err != nil && err != io.EOF {
		log.Fatalf("Error decoding charset registry xml: %s", err.Error())
	}

	t := templateValues{
		PerMIB: map[string][]string{},
		ToMIB:  map[string]string{},
	}
	for _, rec := range reg.Registry[0].Record {
		aliases := rec.AllAliases()
		t.PerMIB[rec.MIB] = aliases
		for _, a := range aliases {
			t.ToMIB[strings.ToUpper(a)] = rec.MIB
		}
	}

	// Create and execute the template
	tmpl, err := template.New("mapInit").Parse(tmp)
	if err != nil {
		log.Fatalf("error while parsing the file template: %s", err.Error())
	}

	w := &bytes.Buffer{}
	err = tmpl.Execute(w, t)
	if err != nil {
		log.Fatalf("error while rendering the file template: %s", err.Error())
	}

	if err := writeGoFile(w.String()); err != nil {
		log.Fatalf("error while generating go file: %s", err.Error())
	}
}

func writeGoFile(code string) error {
	f, err := format.Source([]byte(code))
	if err != nil {
		return err
	}

	if err := os.WriteFile("table.go", f, 0o644); err != nil {
		return err
	}

	return nil
}
