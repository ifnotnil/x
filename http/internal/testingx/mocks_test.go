// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package testingx

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockTestingT creates a new instance of MockTestingT. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTestingT(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTestingT {
	mock := &MockTestingT{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTestingT is an autogenerated mock type for the TestingT type
type MockTestingT struct {
	mock.Mock
}

type MockTestingT_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTestingT) EXPECT() *MockTestingT_Expecter {
	return &MockTestingT_Expecter{mock: &_m.Mock}
}

// Errorf provides a mock function for the type MockTestingT
func (_mock *MockTestingT) Errorf(format string, args ...interface{}) {
	if len(args) > 0 {
		_mock.Called(format, args)
	} else {
		_mock.Called(format)
	}

	return
}

// MockTestingT_Errorf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorf'
type MockTestingT_Errorf_Call struct {
	*mock.Call
}

// Errorf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockTestingT_Expecter) Errorf(format interface{}, args ...interface{}) *MockTestingT_Errorf_Call {
	return &MockTestingT_Errorf_Call{Call: _e.mock.On("Errorf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockTestingT_Errorf_Call) Run(run func(format string, args ...interface{})) *MockTestingT_Errorf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockTestingT_Errorf_Call) Return() *MockTestingT_Errorf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTestingT_Errorf_Call) RunAndReturn(run func(format string, args ...interface{})) *MockTestingT_Errorf_Call {
	_c.Run(run)
	return _c
}

// newMocktFailNow creates a new instance of mocktFailNow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMocktFailNow(t interface {
	mock.TestingT
	Cleanup(func())
}) *mocktFailNow {
	mock := &mocktFailNow{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mocktFailNow is an autogenerated mock type for the tFailNow type
type mocktFailNow struct {
	mock.Mock
}

type mocktFailNow_Expecter struct {
	mock *mock.Mock
}

func (_m *mocktFailNow) EXPECT() *mocktFailNow_Expecter {
	return &mocktFailNow_Expecter{mock: &_m.Mock}
}

// FailNow provides a mock function for the type mocktFailNow
func (_mock *mocktFailNow) FailNow() {
	_mock.Called()
	return
}

// mocktFailNow_FailNow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FailNow'
type mocktFailNow_FailNow_Call struct {
	*mock.Call
}

// FailNow is a helper method to define mock.On call
func (_e *mocktFailNow_Expecter) FailNow() *mocktFailNow_FailNow_Call {
	return &mocktFailNow_FailNow_Call{Call: _e.mock.On("FailNow")}
}

func (_c *mocktFailNow_FailNow_Call) Run(run func()) *mocktFailNow_FailNow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mocktFailNow_FailNow_Call) Return() *mocktFailNow_FailNow_Call {
	_c.Call.Return()
	return _c
}

func (_c *mocktFailNow_FailNow_Call) RunAndReturn(run func()) *mocktFailNow_FailNow_Call {
	_c.Run(run)
	return _c
}

// newMocktHelper creates a new instance of mocktHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMocktHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *mocktHelper {
	mock := &mocktHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mocktHelper is an autogenerated mock type for the tHelper type
type mocktHelper struct {
	mock.Mock
}

type mocktHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *mocktHelper) EXPECT() *mocktHelper_Expecter {
	return &mocktHelper_Expecter{mock: &_m.Mock}
}

// Helper provides a mock function for the type mocktHelper
func (_mock *mocktHelper) Helper() {
	_mock.Called()
	return
}

// mocktHelper_Helper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Helper'
type mocktHelper_Helper_Call struct {
	*mock.Call
}

// Helper is a helper method to define mock.On call
func (_e *mocktHelper_Expecter) Helper() *mocktHelper_Helper_Call {
	return &mocktHelper_Helper_Call{Call: _e.mock.On("Helper")}
}

func (_c *mocktHelper_Helper_Call) Run(run func()) *mocktHelper_Helper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mocktHelper_Helper_Call) Return() *mocktHelper_Helper_Call {
	_c.Call.Return()
	return _c
}

func (_c *mocktHelper_Helper_Call) RunAndReturn(run func()) *mocktHelper_Helper_Call {
	_c.Run(run)
	return _c
}
