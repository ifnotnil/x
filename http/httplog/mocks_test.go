// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package httplog

import (
	"bufio"
	"bytes"
	"io"
	"net"
	"net/http"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockBytesBuffer creates a new instance of MockBytesBuffer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBytesBuffer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBytesBuffer {
	mock := &MockBytesBuffer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBytesBuffer is an autogenerated mock type for the BytesBuffer type
type MockBytesBuffer struct {
	mock.Mock
}

type MockBytesBuffer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBytesBuffer) EXPECT() *MockBytesBuffer_Expecter {
	return &MockBytesBuffer_Expecter{mock: &_m.Mock}
}

// Bytes provides a mock function for the type MockBytesBuffer
func (_mock *MockBytesBuffer) Bytes() []byte {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Bytes")
	}

	var r0 []byte
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	return r0
}

// MockBytesBuffer_Bytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bytes'
type MockBytesBuffer_Bytes_Call struct {
	*mock.Call
}

// Bytes is a helper method to define mock.On call
func (_e *MockBytesBuffer_Expecter) Bytes() *MockBytesBuffer_Bytes_Call {
	return &MockBytesBuffer_Bytes_Call{Call: _e.mock.On("Bytes")}
}

func (_c *MockBytesBuffer_Bytes_Call) Run(run func()) *MockBytesBuffer_Bytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBytesBuffer_Bytes_Call) Return(bytes []byte) *MockBytesBuffer_Bytes_Call {
	_c.Call.Return(bytes)
	return _c
}

func (_c *MockBytesBuffer_Bytes_Call) RunAndReturn(run func() []byte) *MockBytesBuffer_Bytes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHeaderMatcher creates a new instance of MockHeaderMatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHeaderMatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHeaderMatcher {
	mock := &MockHeaderMatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHeaderMatcher is an autogenerated mock type for the HeaderMatcher type
type MockHeaderMatcher struct {
	mock.Mock
}

type MockHeaderMatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHeaderMatcher) EXPECT() *MockHeaderMatcher_Expecter {
	return &MockHeaderMatcher_Expecter{mock: &_m.Mock}
}

// Match provides a mock function for the type MockHeaderMatcher
func (_mock *MockHeaderMatcher) Match(key string, values []string) bool {
	ret := _mock.Called(key, values)

	if len(ret) == 0 {
		panic("no return value specified for Match")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string, []string) bool); ok {
		r0 = returnFunc(key, values)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockHeaderMatcher_Match_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Match'
type MockHeaderMatcher_Match_Call struct {
	*mock.Call
}

// Match is a helper method to define mock.On call
//   - key string
//   - values []string
func (_e *MockHeaderMatcher_Expecter) Match(key interface{}, values interface{}) *MockHeaderMatcher_Match_Call {
	return &MockHeaderMatcher_Match_Call{Call: _e.mock.On("Match", key, values)}
}

func (_c *MockHeaderMatcher_Match_Call) Run(run func(key string, values []string)) *MockHeaderMatcher_Match_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHeaderMatcher_Match_Call) Return(b bool) *MockHeaderMatcher_Match_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockHeaderMatcher_Match_Call) RunAndReturn(run func(key string, values []string) bool) *MockHeaderMatcher_Match_Call {
	_c.Call.Return(run)
	return _c
}

// newMocknetHTTPResponse creates a new instance of mocknetHTTPResponse. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMocknetHTTPResponse(t interface {
	mock.TestingT
	Cleanup(func())
}) *mocknetHTTPResponse {
	mock := &mocknetHTTPResponse{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mocknetHTTPResponse is an autogenerated mock type for the netHTTPResponse type
type mocknetHTTPResponse struct {
	mock.Mock
}

type mocknetHTTPResponse_Expecter struct {
	mock *mock.Mock
}

func (_m *mocknetHTTPResponse) EXPECT() *mocknetHTTPResponse_Expecter {
	return &mocknetHTTPResponse_Expecter{mock: &_m.Mock}
}

// EnableFullDuplex provides a mock function for the type mocknetHTTPResponse
func (_mock *mocknetHTTPResponse) EnableFullDuplex() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnableFullDuplex")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mocknetHTTPResponse_EnableFullDuplex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableFullDuplex'
type mocknetHTTPResponse_EnableFullDuplex_Call struct {
	*mock.Call
}

// EnableFullDuplex is a helper method to define mock.On call
func (_e *mocknetHTTPResponse_Expecter) EnableFullDuplex() *mocknetHTTPResponse_EnableFullDuplex_Call {
	return &mocknetHTTPResponse_EnableFullDuplex_Call{Call: _e.mock.On("EnableFullDuplex")}
}

func (_c *mocknetHTTPResponse_EnableFullDuplex_Call) Run(run func()) *mocknetHTTPResponse_EnableFullDuplex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mocknetHTTPResponse_EnableFullDuplex_Call) Return(err error) *mocknetHTTPResponse_EnableFullDuplex_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mocknetHTTPResponse_EnableFullDuplex_Call) RunAndReturn(run func() error) *mocknetHTTPResponse_EnableFullDuplex_Call {
	_c.Call.Return(run)
	return _c
}

// Flush provides a mock function for the type mocknetHTTPResponse
func (_mock *mocknetHTTPResponse) Flush() {
	_mock.Called()
	return
}

// mocknetHTTPResponse_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type mocknetHTTPResponse_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
func (_e *mocknetHTTPResponse_Expecter) Flush() *mocknetHTTPResponse_Flush_Call {
	return &mocknetHTTPResponse_Flush_Call{Call: _e.mock.On("Flush")}
}

func (_c *mocknetHTTPResponse_Flush_Call) Run(run func()) *mocknetHTTPResponse_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mocknetHTTPResponse_Flush_Call) Return() *mocknetHTTPResponse_Flush_Call {
	_c.Call.Return()
	return _c
}

func (_c *mocknetHTTPResponse_Flush_Call) RunAndReturn(run func()) *mocknetHTTPResponse_Flush_Call {
	_c.Run(run)
	return _c
}

// FlushError provides a mock function for the type mocknetHTTPResponse
func (_mock *mocknetHTTPResponse) FlushError() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for FlushError")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mocknetHTTPResponse_FlushError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushError'
type mocknetHTTPResponse_FlushError_Call struct {
	*mock.Call
}

// FlushError is a helper method to define mock.On call
func (_e *mocknetHTTPResponse_Expecter) FlushError() *mocknetHTTPResponse_FlushError_Call {
	return &mocknetHTTPResponse_FlushError_Call{Call: _e.mock.On("FlushError")}
}

func (_c *mocknetHTTPResponse_FlushError_Call) Run(run func()) *mocknetHTTPResponse_FlushError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mocknetHTTPResponse_FlushError_Call) Return(err error) *mocknetHTTPResponse_FlushError_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mocknetHTTPResponse_FlushError_Call) RunAndReturn(run func() error) *mocknetHTTPResponse_FlushError_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function for the type mocknetHTTPResponse
func (_mock *mocknetHTTPResponse) Header() http.Header {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 http.Header
	if returnFunc, ok := ret.Get(0).(func() http.Header); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Header)
		}
	}
	return r0
}

// mocknetHTTPResponse_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type mocknetHTTPResponse_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
func (_e *mocknetHTTPResponse_Expecter) Header() *mocknetHTTPResponse_Header_Call {
	return &mocknetHTTPResponse_Header_Call{Call: _e.mock.On("Header")}
}

func (_c *mocknetHTTPResponse_Header_Call) Run(run func()) *mocknetHTTPResponse_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mocknetHTTPResponse_Header_Call) Return(header http.Header) *mocknetHTTPResponse_Header_Call {
	_c.Call.Return(header)
	return _c
}

func (_c *mocknetHTTPResponse_Header_Call) RunAndReturn(run func() http.Header) *mocknetHTTPResponse_Header_Call {
	_c.Call.Return(run)
	return _c
}

// Hijack provides a mock function for the type mocknetHTTPResponse
func (_mock *mocknetHTTPResponse) Hijack() (net.Conn, *bufio.ReadWriter, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Hijack")
	}

	var r0 net.Conn
	var r1 *bufio.ReadWriter
	var r2 error
	if returnFunc, ok := ret.Get(0).(func() (net.Conn, *bufio.ReadWriter, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() net.Conn); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Conn)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() *bufio.ReadWriter); ok {
		r1 = returnFunc()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*bufio.ReadWriter)
		}
	}
	if returnFunc, ok := ret.Get(2).(func() error); ok {
		r2 = returnFunc()
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// mocknetHTTPResponse_Hijack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hijack'
type mocknetHTTPResponse_Hijack_Call struct {
	*mock.Call
}

// Hijack is a helper method to define mock.On call
func (_e *mocknetHTTPResponse_Expecter) Hijack() *mocknetHTTPResponse_Hijack_Call {
	return &mocknetHTTPResponse_Hijack_Call{Call: _e.mock.On("Hijack")}
}

func (_c *mocknetHTTPResponse_Hijack_Call) Run(run func()) *mocknetHTTPResponse_Hijack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mocknetHTTPResponse_Hijack_Call) Return(conn net.Conn, readWriter *bufio.ReadWriter, err error) *mocknetHTTPResponse_Hijack_Call {
	_c.Call.Return(conn, readWriter, err)
	return _c
}

func (_c *mocknetHTTPResponse_Hijack_Call) RunAndReturn(run func() (net.Conn, *bufio.ReadWriter, error)) *mocknetHTTPResponse_Hijack_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFrom provides a mock function for the type mocknetHTTPResponse
func (_mock *mocknetHTTPResponse) ReadFrom(src io.Reader) (int64, error) {
	ret := _mock.Called(src)

	if len(ret) == 0 {
		panic("no return value specified for ReadFrom")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(io.Reader) (int64, error)); ok {
		return returnFunc(src)
	}
	if returnFunc, ok := ret.Get(0).(func(io.Reader) int64); ok {
		r0 = returnFunc(src)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = returnFunc(src)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mocknetHTTPResponse_ReadFrom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFrom'
type mocknetHTTPResponse_ReadFrom_Call struct {
	*mock.Call
}

// ReadFrom is a helper method to define mock.On call
//   - src io.Reader
func (_e *mocknetHTTPResponse_Expecter) ReadFrom(src interface{}) *mocknetHTTPResponse_ReadFrom_Call {
	return &mocknetHTTPResponse_ReadFrom_Call{Call: _e.mock.On("ReadFrom", src)}
}

func (_c *mocknetHTTPResponse_ReadFrom_Call) Run(run func(src io.Reader)) *mocknetHTTPResponse_ReadFrom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 io.Reader
		if args[0] != nil {
			arg0 = args[0].(io.Reader)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mocknetHTTPResponse_ReadFrom_Call) Return(n int64, err error) *mocknetHTTPResponse_ReadFrom_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *mocknetHTTPResponse_ReadFrom_Call) RunAndReturn(run func(src io.Reader) (int64, error)) *mocknetHTTPResponse_ReadFrom_Call {
	_c.Call.Return(run)
	return _c
}

// SetReadDeadline provides a mock function for the type mocknetHTTPResponse
func (_mock *mocknetHTTPResponse) SetReadDeadline(deadline time.Time) error {
	ret := _mock.Called(deadline)

	if len(ret) == 0 {
		panic("no return value specified for SetReadDeadline")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = returnFunc(deadline)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mocknetHTTPResponse_SetReadDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetReadDeadline'
type mocknetHTTPResponse_SetReadDeadline_Call struct {
	*mock.Call
}

// SetReadDeadline is a helper method to define mock.On call
//   - deadline time.Time
func (_e *mocknetHTTPResponse_Expecter) SetReadDeadline(deadline interface{}) *mocknetHTTPResponse_SetReadDeadline_Call {
	return &mocknetHTTPResponse_SetReadDeadline_Call{Call: _e.mock.On("SetReadDeadline", deadline)}
}

func (_c *mocknetHTTPResponse_SetReadDeadline_Call) Run(run func(deadline time.Time)) *mocknetHTTPResponse_SetReadDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 time.Time
		if args[0] != nil {
			arg0 = args[0].(time.Time)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mocknetHTTPResponse_SetReadDeadline_Call) Return(err error) *mocknetHTTPResponse_SetReadDeadline_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mocknetHTTPResponse_SetReadDeadline_Call) RunAndReturn(run func(deadline time.Time) error) *mocknetHTTPResponse_SetReadDeadline_Call {
	_c.Call.Return(run)
	return _c
}

// SetWriteDeadline provides a mock function for the type mocknetHTTPResponse
func (_mock *mocknetHTTPResponse) SetWriteDeadline(deadline time.Time) {
	_mock.Called(deadline)
	return
}

// mocknetHTTPResponse_SetWriteDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWriteDeadline'
type mocknetHTTPResponse_SetWriteDeadline_Call struct {
	*mock.Call
}

// SetWriteDeadline is a helper method to define mock.On call
//   - deadline time.Time
func (_e *mocknetHTTPResponse_Expecter) SetWriteDeadline(deadline interface{}) *mocknetHTTPResponse_SetWriteDeadline_Call {
	return &mocknetHTTPResponse_SetWriteDeadline_Call{Call: _e.mock.On("SetWriteDeadline", deadline)}
}

func (_c *mocknetHTTPResponse_SetWriteDeadline_Call) Run(run func(deadline time.Time)) *mocknetHTTPResponse_SetWriteDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 time.Time
		if args[0] != nil {
			arg0 = args[0].(time.Time)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mocknetHTTPResponse_SetWriteDeadline_Call) Return() *mocknetHTTPResponse_SetWriteDeadline_Call {
	_c.Call.Return()
	return _c
}

func (_c *mocknetHTTPResponse_SetWriteDeadline_Call) RunAndReturn(run func(deadline time.Time)) *mocknetHTTPResponse_SetWriteDeadline_Call {
	_c.Run(run)
	return _c
}

// Write provides a mock function for the type mocknetHTTPResponse
func (_mock *mocknetHTTPResponse) Write(bytes []byte) (int, error) {
	ret := _mock.Called(bytes)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return returnFunc(bytes)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = returnFunc(bytes)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(bytes)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mocknetHTTPResponse_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type mocknetHTTPResponse_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - bytes []byte
func (_e *mocknetHTTPResponse_Expecter) Write(bytes interface{}) *mocknetHTTPResponse_Write_Call {
	return &mocknetHTTPResponse_Write_Call{Call: _e.mock.On("Write", bytes)}
}

func (_c *mocknetHTTPResponse_Write_Call) Run(run func(bytes []byte)) *mocknetHTTPResponse_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mocknetHTTPResponse_Write_Call) Return(n int, err error) *mocknetHTTPResponse_Write_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *mocknetHTTPResponse_Write_Call) RunAndReturn(run func(bytes []byte) (int, error)) *mocknetHTTPResponse_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WriteHeader provides a mock function for the type mocknetHTTPResponse
func (_mock *mocknetHTTPResponse) WriteHeader(statusCode int) {
	_mock.Called(statusCode)
	return
}

// mocknetHTTPResponse_WriteHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteHeader'
type mocknetHTTPResponse_WriteHeader_Call struct {
	*mock.Call
}

// WriteHeader is a helper method to define mock.On call
//   - statusCode int
func (_e *mocknetHTTPResponse_Expecter) WriteHeader(statusCode interface{}) *mocknetHTTPResponse_WriteHeader_Call {
	return &mocknetHTTPResponse_WriteHeader_Call{Call: _e.mock.On("WriteHeader", statusCode)}
}

func (_c *mocknetHTTPResponse_WriteHeader_Call) Run(run func(statusCode int)) *mocknetHTTPResponse_WriteHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mocknetHTTPResponse_WriteHeader_Call) Return() *mocknetHTTPResponse_WriteHeader_Call {
	_c.Call.Return()
	return _c
}

func (_c *mocknetHTTPResponse_WriteHeader_Call) RunAndReturn(run func(statusCode int)) *mocknetHTTPResponse_WriteHeader_Call {
	_c.Run(run)
	return _c
}

// WriteString provides a mock function for the type mocknetHTTPResponse
func (_mock *mocknetHTTPResponse) WriteString(data string) (int, error) {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for WriteString")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (int, error)); ok {
		return returnFunc(data)
	}
	if returnFunc, ok := ret.Get(0).(func(string) int); ok {
		r0 = returnFunc(data)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mocknetHTTPResponse_WriteString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteString'
type mocknetHTTPResponse_WriteString_Call struct {
	*mock.Call
}

// WriteString is a helper method to define mock.On call
//   - data string
func (_e *mocknetHTTPResponse_Expecter) WriteString(data interface{}) *mocknetHTTPResponse_WriteString_Call {
	return &mocknetHTTPResponse_WriteString_Call{Call: _e.mock.On("WriteString", data)}
}

func (_c *mocknetHTTPResponse_WriteString_Call) Run(run func(data string)) *mocknetHTTPResponse_WriteString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mocknetHTTPResponse_WriteString_Call) Return(n int, err error) *mocknetHTTPResponse_WriteString_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *mocknetHTTPResponse_WriteString_Call) RunAndReturn(run func(data string) (int, error)) *mocknetHTTPResponse_WriteString_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockResponseWriterWrapper creates a new instance of MockResponseWriterWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResponseWriterWrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResponseWriterWrapper {
	mock := &MockResponseWriterWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockResponseWriterWrapper is an autogenerated mock type for the ResponseWriterWrapper type
type MockResponseWriterWrapper struct {
	mock.Mock
}

type MockResponseWriterWrapper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResponseWriterWrapper) EXPECT() *MockResponseWriterWrapper_Expecter {
	return &MockResponseWriterWrapper_Expecter{mock: &_m.Mock}
}

// Buffer provides a mock function for the type MockResponseWriterWrapper
func (_mock *MockResponseWriterWrapper) Buffer() *bytes.Buffer {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Buffer")
	}

	var r0 *bytes.Buffer
	if returnFunc, ok := ret.Get(0).(func() *bytes.Buffer); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}
	return r0
}

// MockResponseWriterWrapper_Buffer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Buffer'
type MockResponseWriterWrapper_Buffer_Call struct {
	*mock.Call
}

// Buffer is a helper method to define mock.On call
func (_e *MockResponseWriterWrapper_Expecter) Buffer() *MockResponseWriterWrapper_Buffer_Call {
	return &MockResponseWriterWrapper_Buffer_Call{Call: _e.mock.On("Buffer")}
}

func (_c *MockResponseWriterWrapper_Buffer_Call) Run(run func()) *MockResponseWriterWrapper_Buffer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResponseWriterWrapper_Buffer_Call) Return(buffer *bytes.Buffer) *MockResponseWriterWrapper_Buffer_Call {
	_c.Call.Return(buffer)
	return _c
}

func (_c *MockResponseWriterWrapper_Buffer_Call) RunAndReturn(run func() *bytes.Buffer) *MockResponseWriterWrapper_Buffer_Call {
	_c.Call.Return(run)
	return _c
}

// BytesWritten provides a mock function for the type MockResponseWriterWrapper
func (_mock *MockResponseWriterWrapper) BytesWritten() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for BytesWritten")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockResponseWriterWrapper_BytesWritten_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BytesWritten'
type MockResponseWriterWrapper_BytesWritten_Call struct {
	*mock.Call
}

// BytesWritten is a helper method to define mock.On call
func (_e *MockResponseWriterWrapper_Expecter) BytesWritten() *MockResponseWriterWrapper_BytesWritten_Call {
	return &MockResponseWriterWrapper_BytesWritten_Call{Call: _e.mock.On("BytesWritten")}
}

func (_c *MockResponseWriterWrapper_BytesWritten_Call) Run(run func()) *MockResponseWriterWrapper_BytesWritten_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResponseWriterWrapper_BytesWritten_Call) Return(n int) *MockResponseWriterWrapper_BytesWritten_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockResponseWriterWrapper_BytesWritten_Call) RunAndReturn(run func() int) *MockResponseWriterWrapper_BytesWritten_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function for the type MockResponseWriterWrapper
func (_mock *MockResponseWriterWrapper) Header() http.Header {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 http.Header
	if returnFunc, ok := ret.Get(0).(func() http.Header); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Header)
		}
	}
	return r0
}

// MockResponseWriterWrapper_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type MockResponseWriterWrapper_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
func (_e *MockResponseWriterWrapper_Expecter) Header() *MockResponseWriterWrapper_Header_Call {
	return &MockResponseWriterWrapper_Header_Call{Call: _e.mock.On("Header")}
}

func (_c *MockResponseWriterWrapper_Header_Call) Run(run func()) *MockResponseWriterWrapper_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResponseWriterWrapper_Header_Call) Return(header http.Header) *MockResponseWriterWrapper_Header_Call {
	_c.Call.Return(header)
	return _c
}

func (_c *MockResponseWriterWrapper_Header_Call) RunAndReturn(run func() http.Header) *MockResponseWriterWrapper_Header_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function for the type MockResponseWriterWrapper
func (_mock *MockResponseWriterWrapper) Status() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockResponseWriterWrapper_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockResponseWriterWrapper_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *MockResponseWriterWrapper_Expecter) Status() *MockResponseWriterWrapper_Status_Call {
	return &MockResponseWriterWrapper_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *MockResponseWriterWrapper_Status_Call) Run(run func()) *MockResponseWriterWrapper_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResponseWriterWrapper_Status_Call) Return(n int) *MockResponseWriterWrapper_Status_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockResponseWriterWrapper_Status_Call) RunAndReturn(run func() int) *MockResponseWriterWrapper_Status_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function for the type MockResponseWriterWrapper
func (_mock *MockResponseWriterWrapper) Write(bytes1 []byte) (int, error) {
	ret := _mock.Called(bytes1)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return returnFunc(bytes1)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = returnFunc(bytes1)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(bytes1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResponseWriterWrapper_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockResponseWriterWrapper_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - bytes1 []byte
func (_e *MockResponseWriterWrapper_Expecter) Write(bytes1 interface{}) *MockResponseWriterWrapper_Write_Call {
	return &MockResponseWriterWrapper_Write_Call{Call: _e.mock.On("Write", bytes1)}
}

func (_c *MockResponseWriterWrapper_Write_Call) Run(run func(bytes1 []byte)) *MockResponseWriterWrapper_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockResponseWriterWrapper_Write_Call) Return(n int, err error) *MockResponseWriterWrapper_Write_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockResponseWriterWrapper_Write_Call) RunAndReturn(run func(bytes1 []byte) (int, error)) *MockResponseWriterWrapper_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WriteHeader provides a mock function for the type MockResponseWriterWrapper
func (_mock *MockResponseWriterWrapper) WriteHeader(statusCode int) {
	_mock.Called(statusCode)
	return
}

// MockResponseWriterWrapper_WriteHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteHeader'
type MockResponseWriterWrapper_WriteHeader_Call struct {
	*mock.Call
}

// WriteHeader is a helper method to define mock.On call
//   - statusCode int
func (_e *MockResponseWriterWrapper_Expecter) WriteHeader(statusCode interface{}) *MockResponseWriterWrapper_WriteHeader_Call {
	return &MockResponseWriterWrapper_WriteHeader_Call{Call: _e.mock.On("WriteHeader", statusCode)}
}

func (_c *MockResponseWriterWrapper_WriteHeader_Call) Run(run func(statusCode int)) *MockResponseWriterWrapper_WriteHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockResponseWriterWrapper_WriteHeader_Call) Return() *MockResponseWriterWrapper_WriteHeader_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockResponseWriterWrapper_WriteHeader_Call) RunAndReturn(run func(statusCode int)) *MockResponseWriterWrapper_WriteHeader_Call {
	_c.Run(run)
	return _c
}
